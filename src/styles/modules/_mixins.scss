/* ----------------------------------
            Mixins 
---------------------------------- */

@use "sass:list";
@use "sass:math";

/* Keyframes Mixin */

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }

  @-moz-keyframes #{$animation-name} {
    @content;
  }

  @-ms-keyframes #{$animation-name} {
    @content;
  }

  @-o-keyframes #{$animation-name} {
    @content;
  }

  @keyframes #{$animation-name} {
    @content;
  }
}

/* Animation Mixin */

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

/* Transition Mixin */

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/* Box-shadow Mixin */

@mixin box-shadow($shadows...) {
  -webkit-box-shadow: $shadows;
  -moz-box-shadow: $shadows;
  -ms-box-shadow: $shadows;
  box-shadow: $shadows;
}

/* Flex and Flex-direction Mixin */

@mixin flex-direction($direction) {
  flex-direction: $direction;
}

/* Font Mixin */

@mixin fonts($family, $weight, $size: "", $color: "") {
  font-family: $family;
  font-weight: $weight;
  font-size: $size;
  color: $color;
}

/* Ellipsiis Mixin */

@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  display: inline-block;
}

/* Object fit Mixin */

@mixin object-fit($fit: fill, $position: null) {
  -o-object-fit: $fit;
  object-fit: $fit;
  @if $position {
    -o-object-position: $position;
    object-position: $position;
    font-family: "object-fit: #{$fit}; object-position: #{$position}";
  } @else {
    font-family: "object-fit: #{$fit}";
  }
}

/* Make REM from PX */

@function stripUnit($value) {
  @return math.div($value, $value * 0 + 1);
}
@function rem($pxValue) {
  @return #{math.div(stripUnit($pxValue), stripUnit($html-font-size))}rem;
}

/* Media Queries Mixin */

$break-small: 767px;
$break-large: 992px;
$break-extra-large: 1700px;

@mixin breakpoint($media) {
  @if $media == handhelds {
    @media only screen and (max-width: $break-small) {
      @content;
    }
  } @else if $media == medium-screens {
    @media only screen and (min-width: $break-small + 1) and (max-width: $break-large) {
      @content;
    }
  } @else if $media == medium-screens-portrait {
    @media only screen and (min-width: $break-small + 1) and (max-width: $break-large) and (orientation: portrait) {
      @content;
    }
  } @else if $media == wide-screens {
    @media only screen and (min-width: $break-large) {
      @content;
    }
  } @else if $media == extra-wide-screens {
    @media only screen and (min-width: $break-extra-large) {
      @content;
    }
  } @else if $media == dark {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  }
}

/* Create placeholder mixin */

@mixin placeholder($color) {
  &::-webkit-input-placeholder {
    color: $color;
    @include breakpoint(dark) {
      color: var(--white);
    }
  }
  &:-moz-placeholder {
    color: $color;
    @include breakpoint(dark) {
      color: var(--white);
    }
  }
  &::-moz-placeholder {
    color: $color;
    @include breakpoint(dark) {
      color: var(--white);
    }
  }
  &:-ms-input-placeholder {
    color: $color;
    @include breakpoint(dark) {
      color: var(--white);
    }
  }
}
